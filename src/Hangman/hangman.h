#ifndef HANGMAN_H
#define HANGMAN_H

#include <QDialog>


namespace Ui {
class Hangman;
}
/*!
 * \brief Модуль игры "Висилица".
 *
 * Этот модуль содержит основную логику игры "Висилица".
 */
class Hangman : public QDialog
{
    Q_OBJECT

public:
    /// Путь до файла содержащего информацию о рекордах.
    static const QString recordsPath;
    /// Путь до файла с информацией об игре.
    static const QString aboutPath;
    /// Путь до файла с информацией о предыдущей игре.
    static const QString previousGame;
    /// Конструктор класса Виселица.
    explicit Hangman(QWidget *parent = nullptr);
    /// Деструктор класса Виселица.
    ~Hangman();
    /*!
     * \brief Проверка очков игрока на попадение в таблицу рекордов.
     *
     * При завершении игры(закрытие формы, достигнуто максимальное число ошибок, все слова отгаданы) происходит проверка текущих очков игрока.
     * Если он набрал достаточное количество очков, ему будет предложено вписать свое имя в специальную форму, после черо проризойдет обновление таблицы рекордов.
     */
    void check_records();
    /*!
     * \brief Присваивание переменным класса начальных значений.
     */
    void setStartData(QString);
    /*!
     * \brief Определение стиля для формы.
     */
    void setStyle(QString);
    /*!
     * \brief Отображение картинки.
     *
     * \param Количество ошибок сделанных игроком.
     *
     * Отображение картинки виселицы, соответсвующей текущему количесву ошибок, сделанных игроком (входной аргумент функции), на игровом поле.
     */
    void showPic(int p);
    /*!
     * \brief Отображение данных на поле в при начале новой игры или отображении нового слова.
     */
    void startPol();
    /*!
     * \brief Отображение буквы на поле при использовании подсказки "Показать букву".
     *
     * В данной функции происходит выбор случайной буквы слова(из числа еще не открытых игроком) и отображение ее на игровом поле.
     */
    void showLetter();

private slots:
    /*!
     * \brief Обработка нажатия на букву.
     *
     * Проверка нажатой буквы на ее присутствие в слове.
     * Если такая буква есть - пересчет очков и изменение игрового поля(отображение слова со всемпи уже открытыми буквами и новое значение очков игрока).
     * После нажатия нопка становится неактивной.
     */
    void onLetterClicked();
    /*!
     * \brief Обработка нажатия на кнопку "Показать букву".
     *
     * Вызов функции showLetter().
     * После нажатия нопка становится неактивной.
     */
    void on_pushButton_show_clicked();
    /*!
     * \brief Обработка нажатия на кнопку "Вторая жизнь".
     *
     * Изменеие числа ошибок.
     * Отображение измененного игрового поля.
     */
    void on_pushButton_second_clicked();
    /*!
     * \brief сравнение значений.
     * \param первая пара значений.
     * \param вторая пара значений.
     * \return возвращает true если первыый параметр больше второго.
     */
    static bool comp(QPair <QString, int > a, QPair <QString, int > b);
    /*!
     * \brief Сохранение данных текущей игры.
     */
    void saveGame();
    /*!
     * \brief Загрузить предыдущую игру.
     */
    void Hangman::loadGame();

private:
    Ui::Hangman *ui;
    ///Список всех слов для отгадывания.
    QStringList words;
    ///Слово, которое видит на экране игрок.
    QString word_on_screen;
    ///Количество очков, набранных игроком в игре.
    int score;
    ///Коэффициент умножения очков.
    int score_m;
    ///Количество сделанных игроком ошибок.
    int mistakes;
    ///Номер текущего слова.
    int current_word;
};

#endif // HANGMAN_H
